import random

# Function to generate a random initial state
def random_state(n):
    return [random.randint(0, n-1) for _ in range(n)]

# Function to calculate the number of conflicts in a state
def count_conflicts(state):
    n = len(state)
    conflicts = 0
    for i in range(n):
        for j in range(i+1, n):
            if state[i] == state[j] or abs(state[i] - state[j]) == abs(i - j):#check diagonal and Same r/c
                conflicts += 1
    return conflicts

# Function to find the best neighbor by changing one queen's position
def best_neighbor(state):
    n = len(state)
    best_state = state[:]
    min_conflicts = count_conflicts(state)
    for i in range(n):
        for j in range(n):
            if j != state[i]:
                temp_state = state[:]
                temp_state[i] = j
                conflicts = count_conflicts(temp_state)
                if conflicts < min_conflicts:
                    min_conflicts = conflicts
                    best_state = temp_state
    return best_state

# Function to perform hill climbing with random restarts
def hill_climbing(n, max_iterations, max_restarts):
    total_states_examined = 0
    for _ in range(max_restarts):
        print("Restart", _+1)
        current_state = random_state(n)
        conflicts = count_conflicts(current_state)
        total_states_examined += 1
        print("Initial State:", current_state, "| Conflicts:", conflicts)
        while conflicts > 0:
            neighbor = best_neighbor(current_state)
            total_states_examined += 1
            neighbor_conflicts = count_conflicts(neighbor)
            print("Neighbor:", neighbor, "| Conflicts:", neighbor_conflicts)
            if neighbor_conflicts >= conflicts:
                break
            current_state = neighbor
            conflicts = neighbor_conflicts
        if conflicts == 0:
            return current_state, total_states_examined
    return None, total_states_examined


n = int(input("Enter the number of Queen"))
max_iterations = 1000
max_restarts = 100
solution, total_states_examined = hill_climbing(n, max_iterations, max_restarts)
if solution:
    print("Solution found:", solution)
else:
    print("No solution found within the maximum restarts.")
print("Total states examined:", total_states_examined)
