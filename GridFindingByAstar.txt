import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0  # cost from start node to current node
        self.h = 0  # heuristic estimate of cost from current node to goal node
        self.f = 0  # total estimated cost

    def __eq__(self, other):
        return self.position == other.position

    def __lt__(self, other):
        return self.f < other.f

def heuristic(a, b):
    # Manhattan distance heuristic
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(grid, start, goal):
    open_set = []
    closed_set = set()
    start_node = Node(start)
    goal_node = Node(goal)
    heapq.heappush(open_set, start_node)

    while open_set:
        current_node = heapq.heappop(open_set)

        if current_node == goal_node:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        closed_set.add(current_node)

        for neighbor_position in [(0, 1), (0, -1), (1, 0), (-1, 0)]:  # assuming 4-connected grid
            neighbor_x = current_node.position[0] + neighbor_position[0]
            neighbor_y = current_node.position[1] + neighbor_position[1]
            neighbor = (neighbor_x, neighbor_y)

            if neighbor_x < 0 or neighbor_x >= len(grid) or neighbor_y < 0 or neighbor_y >= len(grid[0]):
                continue

            if grid[neighbor_x][neighbor_y] == 1:
                continue

            neighbor_node = Node(neighbor, current_node)

            if neighbor_node in closed_set:
                continue

            neighbor_node.g = current_node.g + 1
            neighbor_node.h = heuristic(neighbor, goal)
            neighbor_node.f = neighbor_node.g + neighbor_node.h

            if any(node == neighbor_node and node.f < neighbor_node.f for node in open_set):
                continue

            heapq.heappush(open_set, neighbor_node)

    return None  # No path found

# Example usage:
grid = [
    [0, 0, 0, 0],
    [0, 1, 1, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0]
]
start = (0, 0)
goal = (3, 3)

path = astar(grid, start, goal)
if path:
    print("Path found:", path)
else:
    print("No path found")
